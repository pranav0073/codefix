public abstract class  HD_IndexPageRecords {
    public static List<Id> incIds;
    public static Integer recordsPerPage {get;set;}
    public static Integer currentPage {get; set;}
    public static String query;

    public class Response{
        @AuraEnabled
        public Integer noOfPages;
        @AuraEnabled
        public Integer noOfRecords;
        @AuraEnabled
        public List<BMCServiceDesk__Change_Request__c> records;
    }

    @AuraEnabled
    public static void updateSelectedColumns(Map<String, String> selectedColumns) {
        // try
        //{
        List<String> selCols = new List<String>();
        String field;
        for(String key : selectedColumns.keySet())
        {
            selCols.add(key+':::'+selectedColumns.get(key));
        }

        HD_User_Configuration_Change__c userConfig = HD_User_Configuration_Change__c.getValues(System.UserInfo.getUserId());
        if(userConfig == null)
        {
            userConfig = new HD_User_Configuration_Change__c();
        }
        for(Integer i=1;i<=selCols.size();i++)
        {
            field = 'Field'+i+'__c';
            userConfig.put(field, selCols[i-1]);

        }
        for(Integer i=selCols.size()+1;i<8;i++)
        {
            field = 'Field'+i+'__c';
            userConfig.put(field, null);
        }
        userConfig.SetupOwnerId = System.UserInfo.getUserId();
        upsert(userConfig);

    }


    public static String queryGenerator()
    {
        Map<String, String> userColumns = getUserColumns();
        Set<String> fields = new Set<String>{'id','name'};//,'BMCServiceDesk__Client_Name__c','BMCServiceDesk__Category_ID__c','HD_Owner_user_queue__c','BMCServiceDesk__Type__c', 'BMCServiceDesk__clientEmail__c' ,'HD_Client_City__c','VIP_Ticket__c' ,'Response_Threshold_Crossed__c', 'SR_Priority__c', 'BMCServiceDesk__openDateTime__c','BMCServiceDesk__dueDateTime__c', 'BMCServiceDesk__closeDateTime__c'};
            //String fsetq = 'Select id,name,BMCServiceDesk__Type__c, BMCServiceDesk__clientEmail__c ,HD_Client_City__c,VIP_Ticket__c ,Response_Threshold_Crossed__c, SR_Priority__c, BMCServiceDesk__openDateTime__c,BMCServiceDesk__dueDateTime__c, BMCServiceDesk__closeDateTime__c  ';
            String  fieldString = 'Select  ';
        for(String key : userColumns.keySet())
        {
            fields.add(key);
        }
        for(String s:fields)
        {
            fieldString+= s +',';
        }

        fieldString = fieldString.substring(0, fieldString.length()-1);
        fieldString+=' from BMCServiceDesk__Change_Request__c ';


        return fieldString;
    }//

    @AuraEnabled
    public static Response getChangeRecords(Id filterId){
        return getChangeList(filterId,'20',null,1,'name','asc');
    }

    @AuraEnabled
    public static Response getChangeList(Id filterId,String noOfRecs,String ticketNumber,Integer pageNo,String orderBy,String sortDirection){

        String query = queryGenerator();

        System.debug('query: ' + query);
        initRecords(filterId);
        String q = query+' where id in :incIds ORDER BY '+orderBy+' '+sortDirection+' LIMIT 9000 ' ;
        System.debug(q);
        //List<BMCServiceDesk__Change_Request__c>
        ApexPages.StandardSetController srmObject2 = new ApexPages.StandardSetController(Database.getQueryLocator(q));

        Integer pageSize = Integer.valueOf(noOfRecs);
        srmObject2.setPageSize(pageSize);
        Integer page_number = Integer.valueOf(pageNo);

        srmObject2.setPageNumber(page_number);

        Response wc = new Response();
        wc.noOfPages = (Integer)Math.ceil((Decimal)srmObject2.getResultSize()/(Decimal)pageSize);
        wc.noOfRecords = srmObject2.getResultSize();
        wc.records = srmObject2.getRecords();

        return wc;
    }

    public Integer rec { get; set; }

    public Integer tot { get; set; }

    integer totalRecs = 0;
    integer count= 0;
    integer LimitSize= 1;

    public HD_IndexPageRecords(){
        tot=totalRecs = [select count() from account limit 1000];
    }

    @AuraEnabled
    public static void initRecords(Id filterId){
        query = queryGenerator();

        Integer count = 0;

        Integer pageNum =1;
        String q = query+' limit 1';
        List<BMCServiceDesk__Change_Request__c> qr = [SELECT id FROM BMCServiceDesk__Change_Request__c LIMIT 1];
        ApexPages.StandardSetController srmObject = new ApexPages.StandardSetController(Database.getQueryLocator(q));
        srmObject.setPageSize(2000);
        srmObject.setPageNumber(pageNum);
        srmObject.setFilterID(filterId);
        incIds = new List<Id>();

        for(SObject inc: srmObject.getRecords())
        {
            System.debug('test');
            incIds.add(inc.Id);
            count++;
        }

        while(srmObject.getHasNext())
        {
            srmObject.next();
            for(SObject inc: srmObject.getRecords()){


                incIds.add(inc.Id);
                count++;
            }

        }



    }

    public List<Lead> leads=new List<Lead>();

    public List<Lead> getLeads() {
        List<Lead> ld=[select Name,Email,Company from Lead LIMIT:limitsize OFFSET:count];
        system.debug('values are:' + ld);
        return ld;
    }

    public void updatePage() {
        leads.clear();
        limitsize=rec;
        leads=[select Name,Email,Company from Lead LIMIT:rec OFFSET:count];
    }

    public PageReference Firstbtn() {
        count=0;
        return null;
    }

    public PageReference prvbtn() {
        count=count-limitsize;
        return null;
    }

    public PageReference Nxtbtn() {
        count=count+limitsize;
        return null;
    }

    public PageReference lstbtn() {
        count= totalrecs - math.mod(totalRecs,LimitSize);
        return null;
    }


    public Boolean getNxt() {
        if((count+ LimitSize) > totalRecs)
            return true;
        else
            return false;
    }

    public Boolean getPrv() {
        if(count== 0)
            return true;
        else
            return false;
    }

    public static List<BMCServiceDesk__Change_Request__c> getChangeRequest(ID ListViewId){

        List<Id> incIds;
        ApexPages.StandardSetController x = new ApexPages.StandardSetController(Database.getQueryLocator([select id from BMCServiceDesk__Change_Request__c]));
        x.setPageSize(2000);
        x.setPageNumber(1);
        x.setFilterID(ListViewId);
        incIds = new List<Id>();
        Integer count = 0;
        for(SObject c: x.getRecords())
        {

            incIds.add(c.Id);
            count++;
        }

        System.debug(count);
        return null;
    }

    @AuraEnabled
    public static List<ListView> getAllListViews(){
        List<ListView> listViews = new List<ListView>();
        listViews = [SELECT Id, name FROM ListView WHERE SObjectType = 'BMCServiceDesk__Change_Request__c'];
        return listViews;
    }

    @AuraEnabled
    public static Map<String, String> getColumns() {
        Map<String, String> cols = new Map<String, String>();
        List<Schema.FieldSetMember> filesset1 = SObjectType.BMCServiceDesk__Change_Request__c.FieldSets.HD_Change_Lightning_Columns.getFields();
        for (Schema.FieldSetMember fsm : filesset1) {
            // System.debug('Field api names: '+fsm.getfieldpath());
            //cols.put((String) fsm.getLabel().substringBefore('~'),(String) fsm.getFieldPath());
            cols.put((String) fsm.getFieldPath(),(String) fsm.getLabel());
        }
        return cols;
    }

    @AuraEnabled
    public static Map<String,String> getUserColumns() {
        Map<String,String> cols = new Map<String,String>();
        String field;
        try
        {


            HD_User_Configuration_Change__c  userConfig = HD_User_Configuration_Change__c.getValues(System.UserInfo.getUserId());

            if(userConfig==null)
            {
                userConfig = HD_User_Configuration_Change__c.getOrgDefaults();

            }

            String value;
            for(Integer i=1;i<15;i++)
            {
                field = 'Field'+i+'__c';
                value = (String)userConfig.get(field);
                if(value!=null)
                {
                    cols.put(value.split(':::')[0].trim(), value.split(':::')[1].trim());
                }
            }
        }

        catch(Exception e)
        {
            HD_UX_Exception_LoggerCls.logErrorRecord(e.getMessage(),e.getStackTraceString());
        }
        return cols;
    }
}
